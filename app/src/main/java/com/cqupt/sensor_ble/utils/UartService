/*
 * Copyright (C) 2013 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.blecamera.yuntai.service;

import android.annotation.TargetApi;
import android.app.Service;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothGatt;
import android.bluetooth.BluetoothGattCallback;
import android.bluetooth.BluetoothGattCharacteristic;
import android.bluetooth.BluetoothGattDescriptor;
import android.bluetooth.BluetoothGattService;
import android.bluetooth.BluetoothManager;
import android.bluetooth.BluetoothProfile;
import android.content.Context;
import android.content.Intent;
import android.os.Binder;
import android.os.Build;
import android.os.IBinder;
import android.support.v4.content.LocalBroadcastManager;
import android.util.Log;

import java.util.List;
import java.util.UUID;

/**
 * Service for managing connection and data communication with a GATT server hosted on a
 * given Bluetooth LE device.
 */
@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
public class UartService extends Service {
    private final static String TAG = "SmartLock";
    private static final String CHAR1_DATA = "char1";
    private static final String WRITE_STATUS = "writeStatus";
    public static final String RSSI = "rssi";
    public static final String RSSI_STATUS = "rssiStatus";
    private BluetoothManager mBluetoothManager;
    private BluetoothAdapter mBluetoothAdapter;
    private String mBluetoothDeviceAddress;
    private BluetoothGatt mBluetoothGatt;
    private static final int STATE_DISCONNECTED = 0;
    private static final int STATE_CONNECTING = 1;
    private static final int STATE_CONNECTED = 2;

    public final static String ACTION_GATT_CONNECTED =
            "com.cqupt.sensor_ble.ACTION_GATT_CONNECTED";
    public final static String ACTION_GATT_DISCONNECTED =
            "com.cqupt.sensor_ble.ACTION_GATT_DISCONNECTED";
    public final static String ACTION_GATT_SERVICES_DISCOVERED =
            "com.cqupt.sensor_ble.ACTION_GATT_SERVICES_DISCOVERED";
    public final static String ACTION_DATA_AVAILABLE =
            "com.cqupt.sensor_ble.ACTION_DATA_AVAILABLE";
    public final static String EXTRA_DATA =
            "com.cqupt.sensor_ble.EXTRA_DATA";
    public final static String DEVICE_DOES_NOT_SUPPORT_UART =
            "com.cqupt.sensor_ble.DEVICE_DOES_NOT_SUPPORT_UART";
    public final static String EXTRAS_DEVICE_IMU = "com.yuntai.device_imu";
    public final static String EXTRAS_TAKEPICTURE = "com.yuntai.takepicture";
    public final static String EXTRAS_TAKEVIDEO = "com.yuntai.takevideo";
    public final static String EXTRAS_TAKEVIDEOPAUSE = "com.yuntai.takevideopause";
    public final static String EXTRAS_CALIBRATION_GYROSCOPE = "com.yuntai.gyroscope";
    public final static String EXTRAS_CALIBRATION_DIANJI = "com.yuntai.dianji";
    public final static String EXTRAS_CALIBRATION_ACCELERMETER = "com.yuntai.accelermeter";
    public final static String UPDATE_FB = "com.yuntai.UPDATE_FB";
    public final static String UPDATE_FC = "com.yuntai.UPDATE_FC";
    public final static String UPDATE_FD = "com.yuntai.UPDATE_FD";
    public final static String UPDATE_FE = "com.yuntai.UPDATE_FE";
    //服务
    private static final UUID RX_SERVICE_UUID = UUID.fromString("0000fff0-0000-1000-8000-00805f9b34fb");

    private static final UUID RX_CHAR_UUID = UUID.fromString("0000fff4-0000-1000-8000-00805f9b34fb");

    private static final UUID TX_CHAR_UUID = UUID.fromString("0000fff4-0000-1000-8000-00805f9b34fb");
    private static final UUID CCCD = UUID.fromString("00002902-0000-1000-8000-00805f9b34fb");

    public static final UUID Battery_Service_UUID = UUID.fromString("0000180F-0000-1000-8000-00805f9b34fb");
    public static final UUID Battery_Level_UUID = UUID.fromString("00002a19-0000-1000-8000-00805f9b34fb");

    private final BluetoothGattCallback mGattCallback = new BluetoothGattCallback() {
        @Override
        public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {
            String intentAction;
            /**
             * 连接成功
             */
            if (newState == BluetoothProfile.STATE_CONNECTED) {
                intentAction = ACTION_GATT_CONNECTED;

                broadcastUpdate(intentAction);
                Log.i(TAG, "Connected to GATT server.");
                // Attempts to discover services after successful connection.
                Log.i(TAG, "Attempting to start service discovery:" +
                        mBluetoothGatt.discoverServices());

                /**
                 * 连接断开
                 */
            } else if (newState == BluetoothProfile.STATE_DISCONNECTED) {
                intentAction = ACTION_GATT_DISCONNECTED;
                System.out.println("service断开连接"+newState);
                Log.i(TAG, "Disconnected from GATT server.");
                broadcastUpdate(intentAction);
            }
        }

        @Override
        public void onServicesDiscovered(BluetoothGatt gatt, int status) {
            System.out.println("se发现服务"+status);
            if (status == BluetoothGatt.GATT_SUCCESS) {
                /*Log.w(TAG, "mBluetoothGatt = " + mBluetoothGatt);
                Toast.makeText(UartService.this,"连接到服务",Toast.LENGTH_LONG).show();*/
                System.out.println("发现服务广播");
                broadcastUpdate(ACTION_GATT_SERVICES_DISCOVERED);
            } else {
                System.out.println("不等于0");
                Log.w(TAG, "onServicesDiscovered received: " + status);
            }
        }

        /**
         * 读取到RSSI
         * @param gatt gatt
         * @param rssi rssi
         * @param status status
         */
        @Override
        public void onReadRemoteRssi(BluetoothGatt gatt, int rssi, int status) {
            super.onReadRemoteRssi(gatt, rssi, status);
            final Intent intent = new Intent(ACTION_DATA_AVAILABLE);
            intent.putExtra(RSSI, "" + rssi);
            intent.putExtra(RSSI_STATUS, "" + status);
            LocalBroadcastManager.getInstance(UartService.this).sendBroadcast(intent);
        }

        /**
         * 判断发送是否成功
         * @param gatt gatt
         * @param characteristic characteristic
         * @param status status
         */
        @Override
        public void onCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {
            super.onCharacteristicWrite(gatt, characteristic, status);

        }

        /**
         * 读出到特征值时调用
         * @param gatt gatt
         * @param characteristic characteristic
         * @param status status
         */
        @Override
        public void onCharacteristicRead(BluetoothGatt gatt,
                                         BluetoothGattCharacteristic characteristic,
                                         int status) {
            System.out.println("读取到数据0");
            if (status == BluetoothGatt.GATT_SUCCESS) {
                /*if (Battery_Level_UUID.equals(characteristic.getUuid())) {
                    broadcastUpdate(EXTRAS_DEVICE_BATTERY, characteristic);
                } else {
                    broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);
                }*/


            }
        }

        /**
         * 特征值变化时调用（有通知）
         * @param gatt gatt
         * @param characteristic characteristic
         */
        @Override
        public void onCharacteristicChanged(BluetoothGatt gatt,
                                            BluetoothGattCharacteristic characteristic) {
           // System.out.println("读取到数据");
            final byte[] byte_data = characteristic.getValue();
            parse(byte_data);
           // System.out.println("读取到的数据为"+toHex(byte_data));

        }
    };

    private byte[] buffer = new byte[1024];
    private int bufferIndex = 0;
    private int bufferLength = 0;
    private int checkSum = 0x00;

    //数据组包处理，收到数据后就调用此方法
    public void parse(byte[] bytes) {
        if (bytes == null) {
            System.out.println("返回为空");
            return;
        }

        if (0 != bufferIndex) {//如果当前buffer有数据，就直接拷贝
            System.arraycopy(bytes, 0, buffer, bufferIndex, bytes.length);
        } else {//如果没有数据，判断当前的数据头部是不是协议头，这里默认协议头是0xFF
            if (bytes[0] == (byte)0xaa && bufferIndex == 0) {
                //计算数据长度，根据协议中长度字段以及协议头、校验码长度
                bufferLength =(bytes[2]&0xff)+6 ;
              //  System.out.println("数据的长度为"+bufferLength);
                buffer = new byte[bufferLength];
                System.arraycopy(bytes, 0, buffer, 0, bytes.length);
            }

        }
        //数据包拷进来后要移位
        bufferIndex += bytes.length;
        final byte[] data = new byte[bufferIndex];
        System.arraycopy(buffer, 0, data, 0, data.length);
        //System.out.println("1读取到的数据为" + toHex(data));
        if (isRightPacket(data)) {//判断数据是否符合协议要求
            //BleLog.i("receive data:" + HexUtil.encodeHexStr(data));

            bufferIndex = 0;//位置清零
           receiveData(data);
        }
    }

    private void receiveData(byte[] data) {

        switch (data[3]){
            case (byte)0x04:
                Intent intent_imu = new Intent(EXTRAS_DEVICE_IMU);
                intent_imu.putExtra("imu",data);
                broadcastUpdate(intent_imu);

                break;

            case (byte)0xe2:
                Intent intent_takepicture = new Intent(EXTRAS_TAKEPICTURE);
                broadcastUpdate(intent_takepicture);

                break;

            case (byte)0xe3:
                System.out.println("1读取到的数据为" + toHex(data));
                Intent intent_takevideo = new Intent(EXTRAS_TAKEVIDEO);
                broadcastUpdate(intent_takevideo);



            case (byte)0x0a:
                Intent intent_calib_gyro = new Intent(EXTRAS_CALIBRATION_GYROSCOPE);
                intent_calib_gyro.putExtra("calib_gyro",data[4]);
                broadcastUpdate(intent_calib_gyro);
                break;

            case (byte)0x0d:
                Intent intent_calib_dianji = new Intent(EXTRAS_CALIBRATION_DIANJI);
                System.out.println("1读取到的数据为" + toHex(data));
                intent_calib_dianji.putExtra("calib_dianji",data[5]);
                broadcastUpdate(intent_calib_dianji);

                break;

            case (byte)0x0b:
                Intent intent_calib_accel = new Intent(EXTRAS_CALIBRATION_ACCELERMETER);
                System.out.println("1读取到的数据为" + toHex(data));

                intent_calib_accel.putExtra("calib_accel",data[4]);
                broadcastUpdate(intent_calib_accel);
                break;
        }
    }




    private boolean isRightPacket(byte[] data) {
        checkSum=0;
        for (int i=0;i<data.length-2;i++){
            checkSum+=data[i];
        }
       // System.out.println("2读取到的数据为" + toHex(data));
       // System.out.println("计算的校验和"+checkSum);
        if ((byte)(checkSum&0xff)==data[data.length-2]&&(byte)0x55==data[data.length-1]){
            return true;
        }

        return false;
    }


    /**
     * 发送一个广播
     *
     * @param action action
     */


    private final static String HEX = "0123456789ABCDEF";
    public static String toHex(byte[] buf) {
        if (buf == null)
            return "";
        StringBuffer result = new StringBuffer(2 * buf.length);
        for (int i = 0; i < buf.length; i++) {
            //System.out.println("解锁的每一位"+buf[i]);
            appendHex(result, buf[i]);
        }
        return result.toString();
    }

    private static void appendHex(StringBuffer sb, byte b) {
        sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));
    }
    private void broadcastUpdate(final String action) {
        final Intent intent = new Intent(action);
        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
    }

    private void broadcastUpdate(Intent intent) {

        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
    }




    /**
     * 返回中间人
     */
    public class LocalBinder extends Binder {
       public UartService getService() {
            return UartService.this;
        }
    }

    @Override
    public IBinder onBind(Intent intent) {
        return mBinder;
    }

    @Override
    public boolean onUnbind(Intent intent) {
        // After using a given device, you should make sure that BluetoothGatt.close() is called
        // such that resources are cleaned up properly.  In this particular example, close() is
        // invoked when the UI is disconnected from the Service.
        close();
        return super.onUnbind(intent);
    }

    private final IBinder mBinder = new LocalBinder();

    /**
     * 初始化蓝牙 获取mBluetoothAdapter
     * Initializes a reference to the local Bluetooth adapter.
     *
     * @return Return true if the initialization is successful.
     */
    public boolean initialize() {
        // For API level 18 and above, get a reference to BluetoothAdapter through
        // BluetoothManager.
        if (mBluetoothManager == null) {
            mBluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);
            if (mBluetoothManager == null) {
                Log.e(TAG, "Unable to initialize BluetoothManager.");
                return false;
            }
        }

        mBluetoothAdapter = mBluetoothManager.getAdapter();
        if (mBluetoothAdapter == null) {
            Log.e(TAG, "Unable to obtain a BluetoothAdapter.");
            return false;
        }

        return true;
    }

    /**
     * 请求读取RSSI
     *
     * @return boolean
     */
    public boolean myReadRemoteRssi() {

        return mBluetoothGatt.readRemoteRssi();
    }

    /**
     * 根据地址 连接蓝牙
     * Connects to the GATT server hosted on the Bluetooth LE device.
     *
     * @param address The device address of the destination device.
     * @return Return true if the connection is initiated successfully. The connection result
     * is reported asynchronously through the
     * {@code BluetoothGattCallback#onConnectionStateChange(android.bluetooth.BluetoothGatt, int, int)}
     * callback.
     */
    public boolean connect(final String address) {
        if (mBluetoothAdapter == null || address == null) {
            Log.w(TAG, "BluetoothAdapter not initialized or unspecified address.");
            return false;
        }

        // Previously connected device.  Try to reconnect.
        if (mBluetoothDeviceAddress != null && address.equals(mBluetoothDeviceAddress)
                && mBluetoothGatt != null) {
            Log.d(TAG, "Trying to use an existing mBluetoothGatt for connection.");
            return mBluetoothGatt.connect();
        }

        final BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(address);
        if (device == null) {
            Log.w(TAG, "Device not found.  Unable to connect.");
            return false;
        }
        // We want to directly connect to the device, so we are setting the autoConnect
        // parameter to false.
        //autoConnect (boolean indicating whether to automatically connect to the BLE device
        // as soon as it becomes available)
        mBluetoothGatt = device.connectGatt(this, false, mGattCallback);
        Log.d(TAG, "Trying to create a new connection.");
        mBluetoothDeviceAddress = address;
        return true;
    }

    /**
     * 断开蓝牙
     * Disconnects an existing connection or cancel a pending connection. The disconnection result
     * is reported asynchronously through the
     * {@code BluetoothGattCallback#onConnectionStateChange(android.bluetooth.BluetoothGatt, int, int)}
     * callback.
     */
    public void disconnect() {
        if (mBluetoothAdapter == null || mBluetoothGatt == null) {
            Log.w(TAG, "BluetoothAdapter not initialized");
            return;
        }
        System.out.println("执行了断开连接");
        mBluetoothGatt.disconnect();
        // mBluetoothGatt.close();
    }

    /**
     * 关闭  回收资源
     * After using a given BLE device, the app must call this method to ensure resources are
     * released properly.
     */
    private void close() {
        if (mBluetoothGatt == null) {
            return;
        }
        Log.w(TAG, "mBluetoothGatt closed");
        mBluetoothDeviceAddress = null;
        mBluetoothGatt.close();
        mBluetoothGatt = null;
    }

    /**
     * 读特征值 异步
     * Request a read on a given {@code BluetoothGattCharacteristic}. The read result is reported
     * asynchronously through the {@code BluetoothGattCallback#onCharacteristicRead(android.bluetooth.BluetoothGatt, android.bluetooth.BluetoothGattCharacteristic, int)}
     * callback.
     *
     * @param characteristic The characteristic to read from.
     */
//    public void readCharacteristic(BluetoothGattCharacteristic characteristic) {
//        if (mBluetoothAdapter == null || mBluetoothGatt == null) {
//            Log.w(TAG, "BluetoothAdapter not initialized");
//            return;
//        }
//        mBluetoothGatt.readCharacteristic(characteristic);
//    }

    /**
     * Enables or disables notification on a give characteristic.
     *
     * @param characteristic Characteristic to act on.
     * @param enabled If true, enable notification.  False otherwise.
     */
    /*
    public void setCharacteristicNotification(BluetoothGattCharacteristic characteristic,
                                              boolean enabled) {
        if (mBluetoothAdapter == null || mBluetoothGatt == null) {
            Log.w(TAG, "BluetoothAdapter not initialized");
            return;
        }
        mBluetoothGatt.setCharacteristicNotification(characteristic, enabled);

                
        if (UUID_HEART_RATE_MEASUREMENT.equals(characteristic.getUuid())) {
            BluetoothGattDescriptor descriptor = characteristic.getDescriptor(
                    UUID.fromString(SampleGattAttributes.CLIENT_CHARACTERISTIC_CONFIG));
            descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);
            mBluetoothGatt.writeDescriptor(descriptor);
        }
    }*/

    /**
     * 数据通知
     * Enable TXNotification
     */
    public void enableTXNotification() {

        if (mBluetoothGatt == null) {
            showMessage("mBluetoothGatt null");
            broadcastUpdate(DEVICE_DOES_NOT_SUPPORT_UART);
            return;
        }

        BluetoothGattService RxService = mBluetoothGatt.getService(RX_SERVICE_UUID);
        if (RxService == null) {
            showMessage("Rx service not found!");
            broadcastUpdate(DEVICE_DOES_NOT_SUPPORT_UART);
            return;
        }
        BluetoothGattCharacteristic TxChar = RxService.getCharacteristic(TX_CHAR_UUID);
        if (TxChar == null) {
            showMessage("Tx characteristic not found!");
            broadcastUpdate(DEVICE_DOES_NOT_SUPPORT_UART);
            return;
        }
        //设置当指定characteristic值变化时，发出通知。
        System.out.println("初始化通知");
        mBluetoothGatt.setCharacteristicNotification(TxChar, true);

        BluetoothGattDescriptor descriptor = TxChar.getDescriptor(CCCD);
        descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);
        mBluetoothGatt.writeDescriptor(descriptor);

    }

    /**
     * 发送数据
     *
     * @param value value
     */
    public void writeRXCharacteristic(byte[] value) {
        BluetoothGattService RxService =null;
        if (mBluetoothGatt!=null) {
            RxService = mBluetoothGatt.getService(RX_SERVICE_UUID);
        }
        if (RxService == null) {
            showMessage("Rx service not found!");
            broadcastUpdate(DEVICE_DOES_NOT_SUPPORT_UART);
            return;
        }
        BluetoothGattCharacteristic RxChar = RxService.getCharacteristic(RX_CHAR_UUID);
        if (RxChar == null) {
            showMessage("Rx characteristic not found!");
            broadcastUpdate(DEVICE_DOES_NOT_SUPPORT_UART);
            return;
        }
        RxChar.setValue(value);
        boolean status = mBluetoothGatt.writeCharacteristic(RxChar);

        Log.d(TAG, "write TXChar - status=" + status);
    }

    public void readCharacteristic(UUID uuid1, UUID uuid2) {

        BluetoothGattService batteryService = mBluetoothGatt.getService(uuid1);
        if (batteryService == null) {
            return;
        }
        BluetoothGattCharacteristic batteryLevel = batteryService.getCharacteristic(uuid2);
        if (batteryLevel == null) {
            return;
        }
        mBluetoothGatt.readCharacteristic(batteryLevel);
    }

    /**
     * 打印日志
     *
     * @param msg msg
     */
    private void showMessage(String msg) {
        Log.e(TAG, msg);
    }

    /**
     * Retrieves a list of supported GATT services on the connected device. This should be
     * invoked only after {@code BluetoothGatt#discoverServices()} completes successfully.
     *
     * @return A {@code List} of supported services.
     */
    public List<BluetoothGattService> getSupportedGattServices() {
        if (mBluetoothGatt == null) return null;

        return mBluetoothGatt.getServices();
    }
}
